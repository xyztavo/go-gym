//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Gyms = newGymsTable("public", "gyms", "")

type gymsTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	AdminID     postgres.ColumnString
	Name        postgres.ColumnString
	Description postgres.ColumnString
	Location    postgres.ColumnString
	Number      postgres.ColumnString
	Img         postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type GymsTable struct {
	gymsTable

	EXCLUDED gymsTable
}

// AS creates new GymsTable with assigned alias
func (a GymsTable) AS(alias string) *GymsTable {
	return newGymsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GymsTable with assigned schema name
func (a GymsTable) FromSchema(schemaName string) *GymsTable {
	return newGymsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GymsTable with assigned table prefix
func (a GymsTable) WithPrefix(prefix string) *GymsTable {
	return newGymsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GymsTable with assigned table suffix
func (a GymsTable) WithSuffix(suffix string) *GymsTable {
	return newGymsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGymsTable(schemaName, tableName, alias string) *GymsTable {
	return &GymsTable{
		gymsTable: newGymsTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newGymsTableImpl("", "excluded", ""),
	}
}

func newGymsTableImpl(schemaName, tableName, alias string) gymsTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		AdminIDColumn     = postgres.StringColumn("admin_id")
		NameColumn        = postgres.StringColumn("name")
		DescriptionColumn = postgres.StringColumn("description")
		LocationColumn    = postgres.StringColumn("location")
		NumberColumn      = postgres.StringColumn("number")
		ImgColumn         = postgres.StringColumn("img")
		allColumns        = postgres.ColumnList{IDColumn, AdminIDColumn, NameColumn, DescriptionColumn, LocationColumn, NumberColumn, ImgColumn}
		mutableColumns    = postgres.ColumnList{AdminIDColumn, NameColumn, DescriptionColumn, LocationColumn, NumberColumn, ImgColumn}
	)

	return gymsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		AdminID:     AdminIDColumn,
		Name:        NameColumn,
		Description: DescriptionColumn,
		Location:    LocationColumn,
		Number:      NumberColumn,
		Img:         ImgColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
