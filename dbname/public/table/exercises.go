//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Exercises = newExercisesTable("public", "exercises", "")

type exercisesTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	Name        postgres.ColumnString
	Description postgres.ColumnString
	Gif         postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ExercisesTable struct {
	exercisesTable

	EXCLUDED exercisesTable
}

// AS creates new ExercisesTable with assigned alias
func (a ExercisesTable) AS(alias string) *ExercisesTable {
	return newExercisesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ExercisesTable with assigned schema name
func (a ExercisesTable) FromSchema(schemaName string) *ExercisesTable {
	return newExercisesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ExercisesTable with assigned table prefix
func (a ExercisesTable) WithPrefix(prefix string) *ExercisesTable {
	return newExercisesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ExercisesTable with assigned table suffix
func (a ExercisesTable) WithSuffix(suffix string) *ExercisesTable {
	return newExercisesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newExercisesTable(schemaName, tableName, alias string) *ExercisesTable {
	return &ExercisesTable{
		exercisesTable: newExercisesTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newExercisesTableImpl("", "excluded", ""),
	}
}

func newExercisesTableImpl(schemaName, tableName, alias string) exercisesTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		NameColumn        = postgres.StringColumn("name")
		DescriptionColumn = postgres.StringColumn("description")
		GifColumn         = postgres.StringColumn("gif")
		allColumns        = postgres.ColumnList{IDColumn, NameColumn, DescriptionColumn, GifColumn}
		mutableColumns    = postgres.ColumnList{NameColumn, DescriptionColumn, GifColumn}
	)

	return exercisesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		Description: DescriptionColumn,
		Gif:         GifColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
