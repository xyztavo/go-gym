//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Plans = newPlansTable("public", "plans", "")

type plansTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	GymID       postgres.ColumnString
	Name        postgres.ColumnString
	Description postgres.ColumnString
	Price       postgres.ColumnFloat
	Duration    postgres.ColumnInteger
	Img         postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PlansTable struct {
	plansTable

	EXCLUDED plansTable
}

// AS creates new PlansTable with assigned alias
func (a PlansTable) AS(alias string) *PlansTable {
	return newPlansTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PlansTable with assigned schema name
func (a PlansTable) FromSchema(schemaName string) *PlansTable {
	return newPlansTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PlansTable with assigned table prefix
func (a PlansTable) WithPrefix(prefix string) *PlansTable {
	return newPlansTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PlansTable with assigned table suffix
func (a PlansTable) WithSuffix(suffix string) *PlansTable {
	return newPlansTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPlansTable(schemaName, tableName, alias string) *PlansTable {
	return &PlansTable{
		plansTable: newPlansTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newPlansTableImpl("", "excluded", ""),
	}
}

func newPlansTableImpl(schemaName, tableName, alias string) plansTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		GymIDColumn       = postgres.StringColumn("gym_id")
		NameColumn        = postgres.StringColumn("name")
		DescriptionColumn = postgres.StringColumn("description")
		PriceColumn       = postgres.FloatColumn("price")
		DurationColumn    = postgres.IntegerColumn("duration")
		ImgColumn         = postgres.StringColumn("img")
		allColumns        = postgres.ColumnList{IDColumn, GymIDColumn, NameColumn, DescriptionColumn, PriceColumn, DurationColumn, ImgColumn}
		mutableColumns    = postgres.ColumnList{GymIDColumn, NameColumn, DescriptionColumn, PriceColumn, DurationColumn, ImgColumn}
	)

	return plansTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		GymID:       GymIDColumn,
		Name:        NameColumn,
		Description: DescriptionColumn,
		Price:       PriceColumn,
		Duration:    DurationColumn,
		Img:         ImgColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
