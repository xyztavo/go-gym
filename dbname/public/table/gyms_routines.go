//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var GymsRoutines = newGymsRoutinesTable("public", "gyms_routines", "")

type gymsRoutinesTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	RoutineID postgres.ColumnString
	GymID     postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type GymsRoutinesTable struct {
	gymsRoutinesTable

	EXCLUDED gymsRoutinesTable
}

// AS creates new GymsRoutinesTable with assigned alias
func (a GymsRoutinesTable) AS(alias string) *GymsRoutinesTable {
	return newGymsRoutinesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GymsRoutinesTable with assigned schema name
func (a GymsRoutinesTable) FromSchema(schemaName string) *GymsRoutinesTable {
	return newGymsRoutinesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GymsRoutinesTable with assigned table prefix
func (a GymsRoutinesTable) WithPrefix(prefix string) *GymsRoutinesTable {
	return newGymsRoutinesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GymsRoutinesTable with assigned table suffix
func (a GymsRoutinesTable) WithSuffix(suffix string) *GymsRoutinesTable {
	return newGymsRoutinesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGymsRoutinesTable(schemaName, tableName, alias string) *GymsRoutinesTable {
	return &GymsRoutinesTable{
		gymsRoutinesTable: newGymsRoutinesTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newGymsRoutinesTableImpl("", "excluded", ""),
	}
}

func newGymsRoutinesTableImpl(schemaName, tableName, alias string) gymsRoutinesTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		RoutineIDColumn = postgres.StringColumn("routine_id")
		GymIDColumn     = postgres.StringColumn("gym_id")
		allColumns      = postgres.ColumnList{IDColumn, RoutineIDColumn, GymIDColumn}
		mutableColumns  = postgres.ColumnList{RoutineIDColumn, GymIDColumn}
	)

	return gymsRoutinesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		RoutineID: RoutineIDColumn,
		GymID:     GymIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
