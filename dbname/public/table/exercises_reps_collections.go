//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ExercisesRepsCollections = newExercisesRepsCollectionsTable("public", "exercises_reps_collections", "")

type exercisesRepsCollectionsTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	AdminID      postgres.ColumnString
	CollectionID postgres.ColumnString
	ExerciseID   postgres.ColumnString
	Reps         postgres.ColumnInteger
	Sets         postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ExercisesRepsCollectionsTable struct {
	exercisesRepsCollectionsTable

	EXCLUDED exercisesRepsCollectionsTable
}

// AS creates new ExercisesRepsCollectionsTable with assigned alias
func (a ExercisesRepsCollectionsTable) AS(alias string) *ExercisesRepsCollectionsTable {
	return newExercisesRepsCollectionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ExercisesRepsCollectionsTable with assigned schema name
func (a ExercisesRepsCollectionsTable) FromSchema(schemaName string) *ExercisesRepsCollectionsTable {
	return newExercisesRepsCollectionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ExercisesRepsCollectionsTable with assigned table prefix
func (a ExercisesRepsCollectionsTable) WithPrefix(prefix string) *ExercisesRepsCollectionsTable {
	return newExercisesRepsCollectionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ExercisesRepsCollectionsTable with assigned table suffix
func (a ExercisesRepsCollectionsTable) WithSuffix(suffix string) *ExercisesRepsCollectionsTable {
	return newExercisesRepsCollectionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newExercisesRepsCollectionsTable(schemaName, tableName, alias string) *ExercisesRepsCollectionsTable {
	return &ExercisesRepsCollectionsTable{
		exercisesRepsCollectionsTable: newExercisesRepsCollectionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                      newExercisesRepsCollectionsTableImpl("", "excluded", ""),
	}
}

func newExercisesRepsCollectionsTableImpl(schemaName, tableName, alias string) exercisesRepsCollectionsTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		AdminIDColumn      = postgres.StringColumn("admin_id")
		CollectionIDColumn = postgres.StringColumn("collection_id")
		ExerciseIDColumn   = postgres.StringColumn("exercise_id")
		RepsColumn         = postgres.IntegerColumn("reps")
		SetsColumn         = postgres.IntegerColumn("sets")
		allColumns         = postgres.ColumnList{IDColumn, AdminIDColumn, CollectionIDColumn, ExerciseIDColumn, RepsColumn, SetsColumn}
		mutableColumns     = postgres.ColumnList{AdminIDColumn, CollectionIDColumn, ExerciseIDColumn, RepsColumn, SetsColumn}
	)

	return exercisesRepsCollectionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		AdminID:      AdminIDColumn,
		CollectionID: CollectionIDColumn,
		ExerciseID:   ExerciseIDColumn,
		Reps:         RepsColumn,
		Sets:         SetsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
