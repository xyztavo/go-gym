//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var RoutinesCollections = newRoutinesCollectionsTable("public", "routines_collections", "")

type routinesCollectionsTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	AdminID      postgres.ColumnString
	RoutineID    postgres.ColumnString
	CollectionID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RoutinesCollectionsTable struct {
	routinesCollectionsTable

	EXCLUDED routinesCollectionsTable
}

// AS creates new RoutinesCollectionsTable with assigned alias
func (a RoutinesCollectionsTable) AS(alias string) *RoutinesCollectionsTable {
	return newRoutinesCollectionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RoutinesCollectionsTable with assigned schema name
func (a RoutinesCollectionsTable) FromSchema(schemaName string) *RoutinesCollectionsTable {
	return newRoutinesCollectionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RoutinesCollectionsTable with assigned table prefix
func (a RoutinesCollectionsTable) WithPrefix(prefix string) *RoutinesCollectionsTable {
	return newRoutinesCollectionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RoutinesCollectionsTable with assigned table suffix
func (a RoutinesCollectionsTable) WithSuffix(suffix string) *RoutinesCollectionsTable {
	return newRoutinesCollectionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRoutinesCollectionsTable(schemaName, tableName, alias string) *RoutinesCollectionsTable {
	return &RoutinesCollectionsTable{
		routinesCollectionsTable: newRoutinesCollectionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newRoutinesCollectionsTableImpl("", "excluded", ""),
	}
}

func newRoutinesCollectionsTableImpl(schemaName, tableName, alias string) routinesCollectionsTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		AdminIDColumn      = postgres.StringColumn("admin_id")
		RoutineIDColumn    = postgres.StringColumn("routine_id")
		CollectionIDColumn = postgres.StringColumn("collection_id")
		allColumns         = postgres.ColumnList{IDColumn, AdminIDColumn, RoutineIDColumn, CollectionIDColumn}
		mutableColumns     = postgres.ColumnList{AdminIDColumn, RoutineIDColumn, CollectionIDColumn}
	)

	return routinesCollectionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		AdminID:      AdminIDColumn,
		RoutineID:    RoutineIDColumn,
		CollectionID: CollectionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
