//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Routines = newRoutinesTable("public", "routines", "")

type routinesTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	AdminID     postgres.ColumnString
	Name        postgres.ColumnString
	Description postgres.ColumnString
	Img         postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RoutinesTable struct {
	routinesTable

	EXCLUDED routinesTable
}

// AS creates new RoutinesTable with assigned alias
func (a RoutinesTable) AS(alias string) *RoutinesTable {
	return newRoutinesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RoutinesTable with assigned schema name
func (a RoutinesTable) FromSchema(schemaName string) *RoutinesTable {
	return newRoutinesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RoutinesTable with assigned table prefix
func (a RoutinesTable) WithPrefix(prefix string) *RoutinesTable {
	return newRoutinesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RoutinesTable with assigned table suffix
func (a RoutinesTable) WithSuffix(suffix string) *RoutinesTable {
	return newRoutinesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRoutinesTable(schemaName, tableName, alias string) *RoutinesTable {
	return &RoutinesTable{
		routinesTable: newRoutinesTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newRoutinesTableImpl("", "excluded", ""),
	}
}

func newRoutinesTableImpl(schemaName, tableName, alias string) routinesTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		AdminIDColumn     = postgres.StringColumn("admin_id")
		NameColumn        = postgres.StringColumn("name")
		DescriptionColumn = postgres.StringColumn("description")
		ImgColumn         = postgres.StringColumn("img")
		allColumns        = postgres.ColumnList{IDColumn, AdminIDColumn, NameColumn, DescriptionColumn, ImgColumn}
		mutableColumns    = postgres.ColumnList{AdminIDColumn, NameColumn, DescriptionColumn, ImgColumn}
	)

	return routinesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		AdminID:     AdminIDColumn,
		Name:        NameColumn,
		Description: DescriptionColumn,
		Img:         ImgColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
